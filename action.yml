name: 'moonsn/setup-mc'
description: 'Setup the minio client (mc) on GitHub Actions'
branding:
  icon: 'file'
  color: 'purple'
inputs:
  platform:
    description: 'The platform to install mc for (auto, windows, darwin, linux)'
    required: false
    default: 'auto'
  arch:
    description: 'The architecture to install mc for (auto, amd64, arm64)'
    required: false
    default: 'auto'
  dl-url:
    description: 'The url to download mc from (if specified, overrides platform/arch detection)'
    required: false
    default: ''
  alias-name:
    description: 'The name of the alias'
    required: false
    default: 'default'
  alias-url:
    description: 'The url for the s3 endpoint'
    required: false
    default: ''
  alias-access-key:
    description: 'The access key for the s3 endpoint'
    required: false
  alias-secret-key:
    description: 'The secret key for the s3 endpoint'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
  - name: Determine platform and architecture
    id: platform
    shell: bash
    run: |
      if [[ "${{ inputs.platform }}" == "auto" ]]; then
        case "${{ runner.os }}" in
          Windows)
            echo "PLATFORM=windows" >> $GITHUB_OUTPUT
            ;;
          macOS)
            echo "PLATFORM=darwin" >> $GITHUB_OUTPUT
            ;;
          Linux)
            echo "PLATFORM=linux" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "::error::Unsupported platform: ${{ runner.os }}"
            exit 1
            ;;
        esac
      else
        echo "PLATFORM=${{ inputs.platform }}" >> $GITHUB_OUTPUT
      fi

      if [[ "${{ inputs.arch }}" == "auto" ]]; then
        case "${{ runner.arch }}" in
          X64)
            echo "ARCH=amd64" >> $GITHUB_OUTPUT
            ;;
          ARM64)
            echo "ARCH=arm64" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "::error::Unsupported architecture: ${{ runner.arch }}"
            exit 1
            ;;
        esac
      else
        echo "ARCH=${{ inputs.arch }}" >> $GITHUB_OUTPUT
      fi

  - name: Set download URL
    id: download
    shell: bash
    run: |
      if [[ "${{ inputs.dl-url }}" != "" ]]; then
        echo "URL=${{ inputs.dl-url }}" >> $GITHUB_OUTPUT
      else
        PLATFORM="${{ steps.platform.outputs.PLATFORM }}"
        ARCH="${{ steps.platform.outputs.ARCH }}"
        
        # Use Windows executable with .exe extension
        if [[ "$PLATFORM" == "windows" ]]; then
          echo "URL=https://dl.minio.io/client/mc/release/$PLATFORM-$ARCH/mc.exe" >> $GITHUB_OUTPUT
          echo "EXT=.exe" >> $GITHUB_OUTPUT
        else
          echo "URL=https://dl.minio.io/client/mc/release/$PLATFORM-$ARCH/mc" >> $GITHUB_OUTPUT
          echo "EXT=" >> $GITHUB_OUTPUT
        fi
      fi

  - name: Create bin directory
    shell: bash
    run: mkdir -p ${{ github.action_path }}/bin

  - name: Install the client
    shell: bash
    run: |
      curl \
        -H 'Cache-Control: no-cache' \
        "${{ steps.download.outputs.URL }}" \
        -o "${{ github.action_path }}/bin/mc${{ steps.download.outputs.EXT }}"
      echo "Installed mc from ${{ steps.download.outputs.URL }}" >> $GITHUB_STEP_SUMMARY

  - name: Make executable (Unix)
    if: runner.os != 'Windows'
    shell: bash
    run: chmod +x "${{ github.action_path }}/bin/mc"

  - name: Add to path
    shell: bash
    run: echo "${{ github.action_path }}/bin" >> $GITHUB_PATH

  - name: Verify installation
    shell: bash
    run: mc${{ steps.download.outputs.EXT }} --version

  - if: ${{ inputs.alias-url != '' }}
    shell: bash
    run: |
      set -euo pipefail
      mc${{ steps.download.outputs.EXT }} alias set \
      ${{ inputs.alias-name }} \
      ${{ inputs.alias-url }} \
      ${{ inputs.alias-access-key }} \
      ${{ inputs.alias-secret-key }}
      echo "Configured [${{ inputs.alias-name}}](${{ inputs.alias-url }})" >> $GITHUB_STEP_SUMMARY
